server {
    listen 80;
    server_name *.localhost;

    set $log_path "/var/logs/spp-hosts.log";
    set $redis_config "127.0.0.1,6379,1000,10"; # redis config (host, port, timeout, pool_size)
    set $spp_debug true; # spp logger
    set $jwt_secret "JWT-SECRET";

    location / {
        set $target "";
        set $proxy_host "";
        set $cookie_value "";

        access_by_lua_block {
            local spp_access = require("spp.access")

            -- Using jwt token
            local res = spp_access(ngx, require("spp.examples.redis_access"))

            if res.success and res.target then
                local host = res.target
                ngx.var.target = "https://www" .. host
                ngx.var.proxy_host = "www." .. host
            end
        }

        # Proxy Pass with the fetched cookie value
        proxy_pass $target;
        proxy_set_header Referer $target;
        proxy_set_header Host $proxy_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_set_header User-Agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36 Edg/127.0.0.0";
        proxy_set_header Connection "keep-alive";
        proxy_set_header Upgrade-Insecure-Requests "1";
        proxy_set_header Cache-Control "max-age=0";

        proxy_set_header Cookie $cookie_value;
        proxy_set_header Accept-Encoding "";

        # Alternatively, use Google's DNS servers
        resolver 8.8.8.8 8.8.4.4 valid=300s ipv6=off;

        # CORS configuration
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, X-Custom-Header';
        add_header 'Access-Control-Max-Age' 1728000;

        # handle IFrame error
        more_clear_headers "X-Frame-Options";

        header_filter_by_lua_block {
            require("spp.examples.header_filter")(ngx)
        }

        body_filter_by_lua_block {
            local body_filter = require("spp.examples.body_filter")
            local chunk, eof = ngx.arg[1], ngx.arg[2]

            if ngx.header["Content-Type"]:find("text/html") then
                -- Append the filtered chunk to the variable
                ngx.ctx.buffered = (ngx.ctx.buffered or "") .. chunk

                if eof then
                    -- Finalize the response body when the end of the response is reached
                    ngx.header["Content-Length"] = tostring(#ngx.ctx.buffered)
                    ngx.arg[1] = body_filter(ngx, ngx.ctx.buffered)
                else
                    -- Discard the original chunk
                    ngx.arg[1] = nil
                end
            else
                ngx.arg[1] = chunk
            end
        }
    }

    proxy_buffer_size 128k;
    proxy_buffers 4 256k;
    proxy_busy_buffers_size 256k;

    # SSL Settings
    proxy_ssl_server_name on;
    proxy_ssl_verify off;

    location ~ /\.(gif|jpg|jpeg|png|svg)$ {
        return 403;
    }

    location ~ /\.ht {
        deny all;
    }
}